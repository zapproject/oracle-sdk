/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ZapMasterInterface extends utils.Interface {
  contractName: "ZapMaster";
  functions: {
    "allowance(address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeVaultContract(address)": FunctionFragment;
    "didMine(bytes32,address)": FunctionFragment;
    "didVote(uint256,address)": FunctionFragment;
    "getAddressVars(bytes32)": FunctionFragment;
    "getAllDisputeVars(uint256)": FunctionFragment;
    "getCurrentVariables()": FunctionFragment;
    "getDisputeIdByDisputeHash(bytes32)": FunctionFragment;
    "getDisputeUintVars(uint256,bytes32)": FunctionFragment;
    "getLastNewValue()": FunctionFragment;
    "getLastNewValueById(uint256)": FunctionFragment;
    "getMinedBlockNum(uint256,uint256)": FunctionFragment;
    "getMinersByRequestIdAndTimestamp(uint256,uint256)": FunctionFragment;
    "getNewValueCountbyRequestId(uint256)": FunctionFragment;
    "getRequestIdByQueryHash(bytes32)": FunctionFragment;
    "getRequestIdByRequestQIndex(uint256)": FunctionFragment;
    "getRequestIdByTimestamp(uint256)": FunctionFragment;
    "getRequestQ()": FunctionFragment;
    "getRequestUintVars(uint256,bytes32)": FunctionFragment;
    "getRequestVars(uint256)": FunctionFragment;
    "getStakerInfo(address)": FunctionFragment;
    "getSubmissionsByTimestamp(uint256,uint256)": FunctionFragment;
    "getTimestampbyRequestIDandIndex(uint256,uint256)": FunctionFragment;
    "getUintVar(bytes32)": FunctionFragment;
    "getVariablesOnDeck()": FunctionFragment;
    "isInDispute(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "retrieveData(uint256,uint256)": FunctionFragment;
    "totalTokenSupply()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeVaultContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "didMine",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "didVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressVars",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDisputeVars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVariables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeIdByDisputeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeUintVars",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNewValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNewValueById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlockNum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinersByRequestIdAndTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByQueryHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByRequestQIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQ",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestUintVars",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestVars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionsByTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyRequestIDandIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUintVar",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVariablesOnDeck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retrieveData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeVaultContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didMine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "didVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDisputeVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeIdByDisputeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValueById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinersByRequestIdAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByQueryHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByRequestQIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionsByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyRequestIDandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUintVar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVariablesOnDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenSupply",
    data: BytesLike
  ): Result;

  events: {
    "NewZapAddress(address)": EventFragment;
    "Received(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewZapAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export type NewZapAddressEvent = TypedEvent<[string], { _newZap: string }>;

export type NewZapAddressEventFilter = TypedEventFilter<NewZapAddressEvent>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; arg1: BigNumber }
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface ZapMaster extends BaseContract {
  contractName: "ZapMaster";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZapMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeVaultContract(
      _vaultContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber[],
        BigNumber
      ]
    >;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastNewValue(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string]]>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestQ(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUintVar(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allowance(
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeVaultContract(
    _vaultContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  didMine(
    _challenge: BytesLike,
    _miner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  didVote(
    _disputeId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAddressVars(_data: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAllDisputeVars(
    _disputeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber[],
      BigNumber
    ]
  >;

  getCurrentVariables(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

  getDisputeIdByDisputeHash(
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputeUintVars(
    _disputeId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastNewValue(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

  getLastNewValueById(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getMinedBlockNum(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinersByRequestIdAndTimestamp(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  getNewValueCountbyRequestId(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestIdByQueryHash(
    _request: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestIdByRequestQIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestIdByTimestamp(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestQ(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRequestUintVars(
    _requestId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestVars(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

  getStakerInfo(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getSubmissionsByTimestamp(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTimestampbyRequestIDandIndex(
    _requestID: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getVariablesOnDeck(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>;

  isInDispute(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  retrieveData(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeVaultContract(
      _vaultContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber[],
        BigNumber
      ]
    >;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastNewValue(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQ(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewZapAddress(address)"(_newZap?: null): NewZapAddressEventFilter;
    NewZapAddress(_newZap?: null): NewZapAddressEventFilter;

    "Received(address,uint256)"(arg0?: null, arg1?: null): ReceivedEventFilter;
    Received(arg0?: null, arg1?: null): ReceivedEventFilter;
  };

  estimateGas: {
    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeVaultContract(
      _vaultContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVariables(overrides?: CallOverrides): Promise<BigNumber>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastNewValue(overrides?: CallOverrides): Promise<BigNumber>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQ(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getVariablesOnDeck(overrides?: CallOverrides): Promise<BigNumber>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeVaultContract(
      _vaultContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastNewValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestQ(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUintVar(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
